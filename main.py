import requests
import time
import threading
import logging
from flask import Flask, request

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = "7613552437:AAHz5jBxB6hJ9_-_1VR9ummuhyU_pnDbsqA"
ADMIN_CHAT_ID = 6750366089  # ‚Üê –í—Å—Ç–∞–≤ —Å–≤—ñ–π chat_id —Å—é–¥–∏
API_URL = f"https://api.telegram.org/bot{TOKEN}/"

last_client_id = None  # –∑–±–µ—Ä—ñ–≥–∞—î ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞

# === –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API ===
def send_message(chat_id, text):
    res = requests.post(API_URL + "sendMessage", data={"chat_id": chat_id, "text": text})
    app.logger.info("üì§ Telegram API: %s | %s", res.status_code, res.text)

# === –ü—É–ª—ñ–Ω–≥: –ª–æ–≤–∏–º–æ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Telegram ===
def start_polling():
    global last_client_id
    offset = None
    while True:
        try:
            res = requests.get(API_URL + "getUpdates", params={"timeout": 100, "offset": offset})
            data = res.json()
            for update in data.get("result", []):
                offset = update["update_id"] + 1
                msg = update.get("message", {})
                chat_id = msg.get("chat", {}).get("id")
                text = msg.get("text", "")
                username = msg.get("from", {}).get("username", "–Ω–µ–≤—ñ–¥–æ–º–æ")

                if not text:
                    continue

                # üîê –Ø–∫—â–æ —Ç–∏ –ø–∏—à–µ—à "/start" ‚Äî –±–æ—Ç —Å–∫–∞–∂–µ —Ç–≤—ñ–π chat_id
                if text == "/start":
                    send_message(chat_id, f"–í–∞—à chat_id: {chat_id}")
                    continue

                # üßë‚Äçüíº –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
                if chat_id == ADMIN_CHAT_ID and last_client_id:
                    send_message(last_client_id, text)
                    send_message(ADMIN_CHAT_ID, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–∫—É–ø—Ü—é")

                # üßç –Ø–∫—â–æ —Ü–µ –ö–õ–Ü–Ñ–ù–¢ ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                elif chat_id != ADMIN_CHAT_ID:
                    last_client_id = chat_id
                    alert = f"üì© –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –≤—ñ–¥ @{username}:\n{text}"
                    send_message(ADMIN_CHAT_ID, alert)

        except Exception as e:
            app.logger.error("‚ùå Polling error: %s", str(e))

        time.sleep(1)

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ CRM ===
@app.route('/forward', methods=['POST'])
def forward():
    global last_client_id
    data = request.json
    app.logger.info("üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ CRM: %s", data)

    text = data.get("text", "")
    username = data.get("username", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    client_id = data.get("client_id")
    if client_id:
        last_client_id = client_id

    message = f"‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username}:\n{text}"
    send_message(ADMIN_CHAT_ID, message)

    return {"status": "ok"}, 200

# === –¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ===
@app.route('/')
def home():
    return '–ë–æ—Ç –ø—Ä–∞—Ü—é—î!'

# === –ó–∞–ø—É—Å–∫ Flask + Polling ===
def run_all():
    threading.Thread(target=start_polling).start()
    app.run(host="0.0.0.0", port=5000)

if __name__ == "__main__":
    run_all()
